#                                                          -*- org -*-

* Notes
** Using most basic fuzzer
http://ftp.cs.wisc.edu/paradyn/fuzz/fuzz-2001/

** Fuzz Testers
- Spike -- simpler
- Flayer -- powerful but maybe harder to setup
- [[http://code.google.com/p/american-fuzzy-lop/][American-fuzzy-lop]] -- newer, only runs on 32-bit machines

*** automated test case generation techniques
- KLEE :: based on LLVM, has run over all coreutils
- Crest uses Cil :: can't handle floats or structs

*** Promising options include
- spike :: used in genprog journal paper, looks like a standard tool
           kit for block based fuzzing (smarter than fuzz2001)
- Flayer :: Google, feedback driven fuzzing, looks /state of the art/
            uses some stuff (e.g., pin) I use for optimization
            http://static.usenix.org/event/woot07/tech/full_papers/drewry/drewry_html/

*** Types of fuzzers
- block based fuzzing
  - spike (used in the genprog journal paper)
- model inference assisted fuzzers
  - PROTOS
- feedback driven fuzzing?
  - using feedback from e.g., gcc's =-finstrument-functions=
  - bunny-the-fuzzer (lcamtuf)
  - EFS (DeMott)
  - Flayer or "Deep Cover"
    - Google: sub-instruction coverage
    - published at USENIX WOOT
    - since extended by others
    - Tavis Ormandy (taviso@google.com)
- constraint solving
  - SAGE (Microsoft)
  - fuzzgrind

*** Fuzz reading
- http://pentest.cryptocity.net/fuzzing/
- file:data/sample_chapter_from_fuzzing.pdf
- file:data/The_Evolving_Art_of_Fuzzing_paper.pdf
- file:data/making_software_dumber.pdf

** LLVM and Klee
Look into klee, it may be combined with the LLVM representation to
select and specifically fuzz variables.

See
- http://klee.llvm.org/Tutorial-1.html
- http://klee.llvm.org/Tutorial-2.html

* Tasks [1/4]
** TODO run indentation fuzz with times of subsequent fuzzes
** TODO errors running on real
: fuzzing #<CIL {102DFE18E3}>
: found fuzz "/tmp/tmp.xNVHStOJzl"(137)
: Caught a weird error: #<END-OF-FILE {1002AB54F3}>
: Caught a weird error: #<END-OF-FILE {1002CAD753}>
: Caught a weird error: #<END-OF-FILE {1002A25173}>
: Caught a weird error: #<END-OF-FILE {1002A2D753}>
: Caught a weird error: #<END-OF-FILE {1002B3D753}>
: Caught a weird error: #<END-OF-FILE {1002AD5753}>
: Caught a weird error: #<END-OF-FILE {1002A85173}>
: Caught a weird error: #<END-OF-FILE {1002B35173}>
: Caught a weird error: #<END-OF-FILE {1002A1E603}>
: Caught a weird error: #<END-OF-FILE {1002B75753}>
: fuzzing NIL
: 
: debugger invoked on a SIMPLE-ERROR in thread
: #<THREAD "main thread" RUNNING {10029C8F53}>:
:   There is no applicable method for the generic function
:     #<STANDARD-GENERIC-FUNCTION FUZZ (1)>
:   when called with arguments
:     (NIL).
: 
: Type HELP for debugger help, or (SB-EXT:EXIT) to exit from SBCL.
: 
: restarts (invokable by number or by possibly-abbreviated name):
:   0: [RETRY] Retry calling the generic function.
:   1: [ABORT] Exit debugger, returning to top level.
: 
: ((SB-PCL::FAST-METHOD NO-APPLICABLE-METHOD (T))
:  #<unused argument>
:  #<unused argument>
:  #<STANDARD-GENERIC-FUNCTION FUZZ (1)>
:  NIL)

** TODO generating a test suite for groff
Running should look something like the following.
: groff -t -mm -man dissemination.mm -Tascii

** DONE fuzz tests for groff                                         :ATTACH:
   :PROPERTIES:
   :Attachments: tmp.5PU3t8xTKi
   :ID:       87fda3c2-a0da-41e9-9198-37bcde807adf
   :END:
Able to generate breaking input (first attached).
